stages:
  - stage: build
    displayName: Build Scope application
    jobs:
      - job: BuildInVM
        timeoutInMinutes: 10
        strategy:
          matrix:
            ubuntu20_04:
              imageName: 'ubuntu-20.04'
            mac10_14:
              imageName: 'macos-10.14'
        #      windows_2017:
        #        imageName: 'vs2017-win2016'
        #      windows_2015:
        #        imageName: 'vs2017-win2016'
        #      alpine:
        #        imageName: 'ubuntu-16.04'
        pool:
          vmImage: $(imageName)
        steps:
          - task: ShellScript@2
            displayName: Install dependencies
            inputs:
              scriptPath: ./install_build_tools.sh
          - script: make all
            displayName: Build all
          - script: make test
            displayName: Run tests
          #- job: BuildInContainer
          #  timeoutInMinutes: 10
          #  pool:
          #    vmImage: 'ubuntu-16.04'
          #  strategy:
          #    matrix:
          #      centos7_6:
          #        containerImage: centos:centos7.6.1810 #https://hub.docker.com/_/centos/
          #      ubuntu18_04:
          #        containerImage: ubuntu:bionic-20190612 #https://hub.docker.com/_/ubuntu/
          #  container: $[ variables['containerImage'] ]
          #  steps:
          #  - script: ./scope.sh build
          #    displayName: scope.sh build
          - publish: ./bin/linux/scopec
            displayName: publish linux application
            condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
            artifact: linux_app

          - publish: ./lib/linux/libscope.so
            displayName: publish linux library
            condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
            artifact: linux_lib

          - publish: ./lib/macOS/libscope.so
            displayName: publish macos library
            condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))
            artifact: macOS_lib


  - stage: integration_tests
    displayName: Run integration tests
    dependsOn: build
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
    jobs:
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: syscalls
          containerName: interposed_func

      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: cribl
          containerName: cribl

      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: nginx
          containerName: nginx

      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: splunk
          containerName: splunk

# Elastic was hanging on azure starting on 11-Sept-2020
#      - template: test/testContainers/azure/it-test-job-template.yml
#        parameters:
#          name: elastic
#          containerName: elastic

      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: kafka
          containerName: kafka

      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: tls
          containerName: tls

      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: detect_proto
          containerName: detect_proto

      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: gogen
          containerName: gogen

      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: go_2
          containerName: go_2
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: go_7
          containerName: go_7
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: go_8
          containerName: go_8
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: go_9
          containerName: go_9
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: go_10
          containerName: go_10
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: go_11
          containerName: go_11
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: go_12
          containerName: go_12
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: go_13
          containerName: go_13
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: go_14
          containerName: go_14
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: go_15
          containerName: go_15

      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: java6
          containerName: java6
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: java7
          containerName: java7
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: java8
          containerName: java8
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: java9
          containerName: java9
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: java10
          containerName: java10
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: java11
          containerName: java11
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: java12
          containerName: java12
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: java13
          containerName: java13
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: java14
          containerName: java14

      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: oracle_java6
          containerName: oracle_java6
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: oracle_java7
          containerName: oracle_java7
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: oracle_java8
          containerName: oracle_java8
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: oracle_java9
          containerName: oracle_java9
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: oracle_java10
          containerName: oracle_java10
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: oracle_java11
          containerName: oracle_java11
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: oracle_java12
          containerName: oracle_java12
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: oracle_java13
          containerName: oracle_java13
      - template: test/testContainers/azure/it-test-job-template.yml
        parameters:
          name: oracle_java14
          containerName: oracle_java14

  - stage: publish
    displayName: Publish artifacts to S3
    dependsOn:
      - build
      - integration_tests
    condition: |
      and
      (
        in(dependencies.integration_tests.result, 'Succeeded', 'Skipped'),
        in(dependencies.build.result, 'Succeeded')
      )
    jobs:
      - job: publish
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'linux_app'
              path: $(Build.BinariesDirectory)/bin/linux/
          - task: S3Upload@1
            displayName: S3_Upload_Apps
            condition: succeeded()
            inputs:
              awsCredentials: 'azure-pipeline-aws-core'
              regionName: 'us-west-2'
              bucketName: 'io.cribl.cdn'
              sourceFolder: '$(Build.BinariesDirectory)/bin/'
              globExpressions: '**/scopec'
              ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
                targetFolder: 'dl/scope/latest/'
              ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
                targetFolder: ${{ format('dl/scope/branch/{0}/', variables['Build.SourceBranchName']) }}
              filesAcl: 'public-read'

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'linux_lib'
              path: $(Build.BinariesDirectory)/lib/linux/
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'macOS_lib'
              path: $(Build.BinariesDirectory)/lib/macOS/
          - task: S3Upload@1
            displayName: S3_Upload_Libs
            condition: succeeded()
            inputs:
              awsCredentials: 'azure-pipeline-aws-core'
              regionName: 'us-west-2'
              bucketName: 'io.cribl.cdn'
              sourceFolder: '$(Build.BinariesDirectory)/lib/'
              globExpressions: '**/*.so'
              ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
                targetFolder: 'dl/scope/latest/'
              ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
                targetFolder: ${{ format('dl/scope/branch/{0}/', variables['Build.SourceBranchName']) }}
              filesAcl: 'public-read'

