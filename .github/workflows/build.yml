name: Build & Test

on: 
  push:

  pull_request:
    branches:
      - 'main'
      - 'master'
      - 'releases/*'

env:
  #REGISTRY: ghcr.io
  REGISTRY: docker.io
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

jobs:

  info:
    name: Get Build Info
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Get Version
        id: version
        uses: battila7/get-version-action@v2

      - name: Get Tag
        id: tag
        run: |
          if [ "true" = "${{ steps.version.outputs.is-semver }}" ]; then
              echo "::set-output name=tag::${{ steps.version.outputs.version-without-v }}"
              echo "::set-output name=push::true"
              if [ -z "${{ steps.version.outputs.prerelease }}" ]; then
                if [ "${{ steps.version.outputs.version }}" = "$(git tag -l v* | sort -V | tail -1)" ]; then
                  echo "::set-output name=latest::true"
                fi
              fi
          else
            echo "::set-output name=branch::${GITHUB_REF#*refs/heads/}"
            if [ "refs/heads/main" = "${GITHUB_REF}" -o "refs/heads/master" = "${GITHUB_REF}" ]; then
              echo "::set-output name=tag::next"
              echo "::set-output name=push::true"
            else
              echo "::set-output name=tag::unreleased"
            fi
          fi
          echo "::group::outputs"
          echo "version=\"${{ steps.version.outputs.version }}\""
          echo "major=\"${{ steps.version.outputs.major }}\""
          echo "minor=\"${{ steps.version.outputs.minor }}\""
          echo "maintenance=\"${{ steps.version.outputs.patch }}\""
          echo "prerelease=\"${{ steps.version.outputs.prerelease }}\""
          echo "build=\"${{ steps.version.outputs.build }}\""
          echo "is-semver=\"${{ steps.version.outputs.is-semver }}\""
          echo "tag=\"${{ steps.tag.outputs.tag }}\""
          echo "latest=\"${{ steps.tag.outputs.latest }}\""
          echo "push=\"${{ steps.tag.outputs.push }}\""
          echo "branch=\"${{ steps.tag.outputs.branch }}\""
          echo "::endgroup::"

      - name: Create Release
        id: release
        if: ${{ steps.version.outputs.is-semver == 'true' }}
        run: |
            if gh release view ${{ steps.version.outputs.version }} >/dev/null 2>&1; then \
              echo "info: ${{ steps.version.outputs.version }} release already exists"; \
            else
              if [ -n "${{ steps.version.outputs.prerelease }}" ]; then
                gh release create ${{ steps.version.outputs.version }} -p \
                  -n "${{ steps.notes.outputs.release_notes }}" \
                  -t "Pre-Release ${{ steps.version.outputs.version-without-v }}"
                echo "info: created Pre-Release ${{ steps.version.outputs.version-without-v }}"; \
              else
                gh release create ${{ steps.version.outputs.version }} \
                  -n "${{ steps.notes.outputs.release_notes }}" \
                  -t "Release ${{ steps.version.outputs.version-without-v }}"
                echo "info: created Release ${{ steps.version.outputs.version-without-v }}"; \
              fi \
            fi

    outputs:
      version: ${{ steps.version.outputs.version }}
      is-semver: ${{ steps.version.outputs.is-semver }}
      tag: ${{ steps.tag.outputs.tag }}
      latest: ${{ steps.tag.outputs.latest }}
      push: ${{ steps.tag.outputs.push }}
      branch: ${{ steps.tag.outputs.branch }}

  build-amd64:
    name: Build x86_64/amd64
    needs: info
    runs-on: ubuntu-latest
    steps:
      - name: Dump Environment
        run: |
            echo "::group::env"
            env | sort
            echo "::endgroup::"
            echo "::group::pwd"
            pwd
            echo "::endgroup::"
            echo "::group::net"
            hostname
            ip addr
            cat /etc/resolv.conf
            resolvectl status
            echo "::endgroup::"
            echo "::group::uname"
            uname -a
            echo "::endgroup::"
            echo "::group::cpuinfo"
            cat /proc/cpuinfo
            echo "::endgroup::"
            echo "::group::lscpu"
            lscpu
            echo "::endgroup::"
            echo "::group::ldd"
            ldd --version
            echo "::endgroup::"
            echo "::group::free"
            free
            echo "::endgroup::"
            echo "::group::home"
            ls -la $HOME
            echo "::endgroup::"

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Setup Docker Cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-amd64-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-amd64-buildx-

      - name: Setup Go Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            cli/.gobin
            cli/.gocache
            cli/.gomod
          key: ${{ runner.os }}-amd64-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-amd64-go-

      - name: Build & Test
        env:
          VERSION: ${{ needs.info.outputs.tag }}
          BUILDER: ${{ steps.buildx.outputs.name }}
          CACHE_FROM: type=local,src=/tmp/.buildx-cache
          CACHE_TO: type=local,dest=/tmp/.buildx-cache-new
        run: make build

      - name: List Integration Tests
        id: tests
        run: echo "::set-output name=tests::$(docker-compose -f test/testContainers/docker-compose.yml -f test/testContainers/docker-compose.x86_64.yml config --services | sort -V | jq -ncR '[inputs]')"

      - name: Save Binaries for Testing
        # XXX
        #if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v2
        with:
          name: binaries-amd64
          path: |
            lib/linux/x86_64/libscope.so
            bin/linux/x86_64/scope
            bin/linux/x86_64/ldscope
          retention-days: 5

      - name: Update Docker Cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    outputs:
      tests: ${{ steps.tests.outputs.tests }}

  build-arm64:
    name: Build aarch64/arm64
    needs: info
    runs-on: [self-hosted,ARM64]
    steps:
      - name: Dump Environment
        run: |
            echo "::group::env"
            env | sort
            echo "::endgroup::"
            echo "::group::pwd"
            pwd
            echo "::endgroup::"
            echo "::group::net"
            hostname
            ip addr
            cat /etc/resolv.conf
            resolvectl status
            echo "::endgroup::"
            echo "::group::uname"
            uname -a
            echo "::endgroup::"
            echo "::group::cpuinfo"
            cat /proc/cpuinfo
            echo "::endgroup::"
            echo "::group::lscpu"
            lscpu
            echo "::endgroup::"
            echo "::group::ldd"
            ldd --version
            echo "::endgroup::"
            echo "::group::free"
            free
            echo "::endgroup::"

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Setup Docker Cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-arm64-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-arm64-buildx-

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            cli/.gobin
            cli/.gocache
            cli/.gomod
          key: ${{ runner.os }}-arm64-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-arm64-go-

      - name: Build & Test
        env:
          VERSION: ${{ needs.info.outputs.tag }}
          BUILDER: ${{ steps.buildx.outputs.name }}
          CACHE_FROM: type=local,src=/tmp/.buildx-cache
          CACHE_TO: type=local,dest=/tmp/.buildx-cache-new
        run: make build

      - name: List Integration Tests
        id: tests
        run: echo "::set-output name=tests::$(docker-compose -f test/testContainers/docker-compose.yml -f test/testContainers/docker-compose.aarch64.yml config --services | sort -V | jq -ncR '[inputs]')"

      - name: Save Binaries for Testing
        # XXX
        #if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v2
        with:
          name: binaries-arm64
          path: |
            lib/linux/aarch64/libscope.so
            bin/linux/aarch64/scope
            bin/linux/aarch64/ldscope
          retention-days: 5

      - name: Update Docker Cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    outputs:
      tests: ${{ steps.tests.outputs.tests }}

  cdn: 
    name: Update CDN
    needs: [info,build-amd64,build-arm64]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Download x86_64/amd64 Binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries-amd64

      - name: Download aarch64/arm64 Binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries-arm64

      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CF_DISTRIBUTION_ID: ${{ secrets.CF_DISTRIBUTION_ID }}
        run: |
          if [ "unreleased" = "${{ needs.info.outputs.tag }}" ]; then
            VERSION=${{ needs.info.outputs.branch }}
          else
            VERSION=${{ needs.info.outputs.tag }}
          fi

          echo "::group::Deploying to https://cdn.cribl.io/dl/scope/${VERSION}"

          S3_SCOPE=s3://io.cribl.cdn/dl/scope
          TMPDIR=$(mktemp -d)
          mkdir ${TMPDIR}/scope

          cp conf/{scope.yml,scope_protocol.yml} ${TMPDIR}/scope
          if ARCH in x86_64 aarch64; do
            cp bin/linux/${ARCH}/{scope,ldscope} ${TMPDIR}/scope
            cp lib/linux/${ARCH}/libscope.so ${TMPDIR}/scope
            (cd ${TMPDIR} && tar cfz scope.tgz scope)
            (cd ${TMPDIR} && md5sum scope.tgz > scope-${ARCH}.tgz.md5)
            (cd ${TMPDIR}/scope && md5sum scope > ../scope-${ARCH}.md5)
            cp ${TMPDIR}/scope/scope ${TMPDIR}/scope-${ARCH}
          done


          if [ -n "${{ needs.info.outputs.latest }}" ]; then
            echo "${{ needs.info.outputs.tag }}" > ${TMPDIR}/latest
            aws s3 cp ${TMPDIR}/latest ${S3_SCOPE}/latest
          fi

          aws s3 cp ${TMPDIR}/scope-x86_64         ${S3_SCOPE}/${VERSION}/linux/scope
          aws s3 cp ${TMPDIR}/scope-x86_64.md5     ${S3_SCOPE}/${VERSION}/linux/scope.md5
          aws s3 cp ${TMPDIR}/scope-x86_64.tgz     ${S3_SCOPE}/${VERSION}/linux/scope.tgz
          aws s3 cp ${TMPDIR}/scope-x86_64.tgz.md5 ${S3_SCOPE}/${VERSION}/linux/scope.tgz.md5

          if ARCH in x86_64 aarch64; do
            aws s3 cp ${TMPDIR}/scope-${ARCH}         ${S3_SCOPE}/${VERSION}/linux/${ARCH}/scope
            aws s3 cp ${TMPDIR}/scope-${ARCH}.md5     ${S3_SCOPE}/${VERSION}/linux/${ARCH}/scope.md5
            aws s3 cp ${TMPDIR}/scope-${ARCH}.tgz     ${S3_SCOPE}/${VERSION}/linux/${ARCH}/scope.tgz
            aws s3 cp ${TMPDIR}/scope-${ARCH}.tgz.md5 ${S3_SCOPE}/${VERSION}/linux/${ARCH}/scope.tgz.md5
          done

          aws cloudfront create-invalidation --distribution-id ${CF_DISTRIBUTION_ID} --paths '/dl/scope/'"$VERSION"'/*'

          echo "::endgroup::"

          if [ "true" = "${{ needs.info.outputs.is-semver }}" ]; then
            if ARCH in x86_64 aarch64; do
              gh release upload ${{ needs.info.outputs.version }} "${TMPDIR}/scope-${ARCH}"
              gh release upload ${{ needs.info.outputs.version }} "${TMPDIR}/scope-${ARCH}.md5"
              gh release upload ${{ needs.info.outputs.version }} "${TMPDIR}/scope-${ARCH}.tgz"
              gh release upload ${{ needs.info.outputs.version }} "${TMPDIR}/scope-${ARCH}.tgz.md5"
            done
          fi

  test-amd64:
    name: Test x86_64/amd64
    needs: build-amd64
    # XXX
    #if: ${{ github.event_name == 'pull_request' && github.event.pull_request.draft == false }}
    strategy:
      matrix: 
        test: ${{ fromJson(needs.build-amd64.outputs.tests) }}
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Setup Docker Cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-amd64-test-${{ matrix.test }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-amd64-test-${{ matrix.test }}-

      - name: Download Binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries-amd64

      - name: Check Binaries
        run: |
          ls -laR bin lib

      - name: Run Test
        run: |
          chmod +x bin/linux/*/* lib/linux/*/*
          make -C test/testContainers ${{ matrix.test }}

      - name: Update Docker Cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  test-arm64:
    name: Test x86_64/arm64
    needs: build-arm64
    # XXX
    #if: ${{ github.event_name == 'pull_request' && github.event.pull_request.draft == false }}
    strategy:
      matrix: 
        test: ${{ fromJson(needs.build-arm64.outputs.tests) }}
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Setup Docker Cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-arm64-test-${{ matrix.test }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-arm64-test-${{ matrix.test }}-

      - name: Download Binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries-arm64

      - name: Run Test
        run: |
          chmod +x bin/linux/*/* lib/linux/*/*
          make -C test/testContainers ${{ matrix.test }}

      - name: Update Docker Cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  image:
    name: Build Image
    needs: [info,build-amd64,build-arm64,test-amd64,test-arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          #username: scopeci
          #password: ${{ secrets.SCOPECI_TOKEN }}

      - name: Download x86_64/amd64 Binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries-amd64

      - name: Download aarch64/arm64 Binaries
        uses: actions/download-artifact@v2
        with:
          name: binaries-arm64

      - name: Build Image
        env:
          VERSION: ${{ needs.info.outputs.tag }}
          LATEST: ${{ needs.info.outputs.latest }}
          PUSH: ${{ needs.info.outputs.push }}
        run: |
          [ "${PUSH}" ] && TYPE=registry || TYPE=local
          docker buildx build \
                --builder ${{ steps.buildx.outputs.name }} \
                --tag ${GITHUB_REPOSITORY}:${VERSION} \
                ${LATEST:+ --tag ${GITHUB_REPOSITORY}:latest} \
                --platform linux/amd64,linux/arm64/v8 \
                --output type=${TYPE} \
                --file docker/base/Dockerfile \
                .

