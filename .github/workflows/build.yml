name: Build & Test

on: 
  push:

  pull_request:
    branches:
      - 'main'
      - 'master'
      - 'releases/*'

env:
  #REGISTRY: ghcr.io
  REGISTRY: docker.io
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

jobs:

  info:
    name: Get Build Info
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Get Version
        id: version
        uses: battila7/get-version-action@v2

      - name: Get Tag
        id: tag
        run: |
          if [ "true" = "${{ steps.version.outputs.is-semver }}" ]; then
              TAG=${{ steps.version.outputs.version-without-v }}
              echo "::set-output name=push::true"
              if [ -z "${{ steps.version.outputs.prerelease }}" ]; then
                # TODO: make sure it's really the latest and not a maintenance relase for an older version
                echo "::set-output name=latest::true"
              fi
          else
            if [ "refs/heads/main" = "${GITHUB_REF}" -o "refs/heads/master" = "${GITHUB_REF}" ]; then
              TAG=next
              echo "::set-output name=push::true"
            else
              TAG=unreleased
            fi
          fi
          echo "::set-output name=tag::${TAG}"

      - name: Create Release
        id: release
        if: ${{ steps.version.outputs.is-semver == 'true' }}
        run: |
            if gh release view ${{ steps.version.outputs.version }} >/dev/null 2>&1; then \
              echo "info: ${{ steps.version.outputs.version }} release already exists"; \
            else
              if [ -n "${{ steps.version.outputs.prerelease }}" ]; then
                gh release create ${{ steps.version.outputs.version }} -p \
                  -n "${{ steps.notes.outputs.release_notes }}" \
                  -t "Pre-Release ${{ steps.version.outputs.version-without-v }}"
              else
                gh release create ${{ steps.version.outputs.version }} \
                  -n "${{ steps.notes.outputs.release_notes }}" \
                  -t "Release ${{ steps.version.outputs.version-without-v }}"
              fi \
            fi

    outputs:
      version: ${{ steps.version.outputs.version }}
      is-semver: ${{ steps.version.outputs.is-semver }}
      tag: ${{ steps.tag.outputs.tag }}
      latest: ${{ steps.tag.outputs.latest }}
      push: ${{ steps.tag.outputs.push }}

  build-amd64:
    name: Build x86_64/amd64
    needs: info
    runs-on: ubuntu-latest
    steps:
      - name: Dump Environment
        run: |
            echo "::group::env"
            env
            echo "::endgroup::"
            echo "::group::pwd"
            pwd
            echo "::endgroup::"
            echo "::group::net"
            hostname
            ip addr
            cat /etc/resolv.conf
            echo "::endgroup::"
            echo "::group::uname"
            uname -a
            echo "::endgroup::"
            echo "::group::cpuinfo"
            cat /proc/cpuinfo
            echo "::endgroup::"
            echo "::group::lscpu"
            lscpu
            echo "::endgroup::"
            echo "::group::ldd"
            ldd --version
            echo "::endgroup::"
            echo "::group::free"
            free
            echo "::endgroup::"
            echo "::group::home"
            ls -la $HOME
            echo "::endgroup::"

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Setup Docker Cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-amd64-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-amd64-buildx-

      - name: Setup Go Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            cli/.gobin
            cli/.gocache
            cli/.gomod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build & Test
        env:
          VERSION: ${{ needs.info.outputs.tag }}
          BUILDER: ${{ steps.buildx.outputs.name }}
          CACHE_FROM: type=local,src=/tmp/.buildx-cache
          CACHE_TO: type=local,dest=/tmp/.buildx-cache-new
        run: make build

      - name: List Integration Tests
        id: tests
        run: echo "::set-output name=tests::$(docker-compose -f test/testContainers/docker-compose.yml config --services | sort -V | jq -ncR '[inputs]')"

      - name: Add Binaries to the Release
        id: release
        if: ${{ needs.info.outputs.is-semver == 'true' }}
        run: |
          gh release upload ${{ needs.info.outputs.version }} "bin/linux/x86_64/scope#scope-x86_64"
          gh release upload ${{ needs.info.outputs.version }} "lib/linux/x86_64/libscope.so#ldscope-x86_64.so"

      - name: Save Binaries for Testing
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v2
        with:
          name: binaries x86_64
          path: |
            lib/linux/x86_64/libscope.so
            bin/linux/x86_64/scope
            bin/linux/x86_64/ldscope
          retention-days: 5

      #- name: Deploy Artifacts to CDN
      #  if: ${{ github.event_name == 'push' }}
      #  env:
      #    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #    AWS_REGION: ${{ secrets.AWS_REGION }}
      #    CF_DISTRIBUTION_ID: ${{ secrets.CF_DISTRIBUTION_ID }}
      #  run: ./deploy.sh

      #- name: Build & Push Container Image to Docker Hub
      #  if: startsWith(github.ref, 'refs/tags/v')
      #  env:
      #    SCOPECI_TOKEN: ${{ secrets.SCOPECI_TOKEN }}
      #  run: ./docker/build.sh

    outputs:
      tests: ${{ steps.tests.outputs.tests }}

  build-arm64:
    name: Build aarch64/arm64
    needs: info
    runs-on: [self-hosted,ARM64]
    steps:
      - name: Dump Environment
        run: |
            echo "::group::env"
            env
            echo "::endgroup::"
            echo "::group::pwd"
            pwd
            echo "::endgroup::"
            echo "::group::net"
            hostname
            ip addr
            cat /etc/resolv.conf
            echo "::endgroup::"
            echo "::group::uname"
            uname -a
            echo "::endgroup::"
            echo "::group::cpuinfo"
            cat /proc/cpuinfo
            echo "::endgroup::"
            echo "::group::lscpu"
            lscpu
            echo "::endgroup::"
            echo "::group::ldd"
            ldd --version
            echo "::endgroup::"
            echo "::group::free"
            free
            echo "::endgroup::"

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Setup Docker Cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-arm64-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-arm64-buildx-

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            cli/.gobin
            cli/.gocache
            cli/.gomod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build & Test
        env:
          VERSION: ${{ needs.info.outputs.tag }}
          BUILDER: ${{ steps.buildx.outputs.name }}
          CACHE_FROM: type=local,src=/tmp/.buildx-cache
          CACHE_TO: type=local,dest=/tmp/.buildx-cache-new
        run: make build

      - name: List Integration Tests
        id: tests
        run: echo "::set-output name=tests::$(docker-compose -f test/testContainers/docker-compose.yml config --services | sort -V | jq -ncR '[inputs]')"

      - name: Add Binaries to the Release
        id: release
        if: ${{ needs.info.outputs.is-semver == 'true' }}
        run: |
          gh release upload ${{ needs.info.outputs.version }} "bin/linux/aarch64/scope#scope-aarch64"
          gh release upload ${{ needs.info.outputs.version }} "lib/linux/aarch64/libscope.so#ldscope-aarch64.so"

      - name: Save Binaries for Testing
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v2
        with:
          name: binaries aarch64
          path: |
            lib/linux/aarch64/libscope.so
            bin/linux/aarch64/scope
            bin/linux/aarch64/ldscope
          retention-days: 5

      #- name: Deploy Artifacts to CDN
      #  if: ${{ github.event_name == 'push' }}
      #  env:
      #    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #    AWS_REGION: ${{ secrets.AWS_REGION }}
      #    CF_DISTRIBUTION_ID: ${{ secrets.CF_DISTRIBUTION_ID }}
      #  run: ./deploy.sh

      #- name: Build & Push Container Image to Docker Hub
      #  if: startsWith(github.ref, 'refs/tags/v')
      #  env:
      #    SCOPECI_TOKEN: ${{ secrets.SCOPECI_TOKEN }}
      #  run: ./docker/build.sh

    outputs:
      tests: ${{ steps.tests.outputs.tests }}

#  test:
#    name: Test
#    needs: build
#    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.draft == false }}
#    strategy:
#      matrix: 
#        test: ${{ fromJson(needs.build-scope.outputs.tests) }}
#        dist: [ubuntu]
#        arch: [x86_64,aarch64]
#      fail-fast: false
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v2
#
#      - name: Setup QEMU
#        uses: docker/setup-qemu-action@v1
#
#      - name: Setup Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Download Binaries
#        uses: actions/download-artifact@v2
#        with:
#          name: binaries ${{ matrix.dist }} ${{ matrix.arch }}
#          path: bin
#
#      - name: Run Test
#        run: |
#          chmod +x bin/linux/${{ matrix.arch }}/* lib/linux/${{ matrix.arch }}/*
#          make -C test/testContainers ${{ matrix.test }}

#  test-image:
#    needs: build
#    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
#    strategy:
#      matrix: 
#        test: ${{ fromJson(needs.build-scope.outputs.tests) }}
#      fail-fast: false
#    name: "Update Image: ${{ matrix.test }}"
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v2
#
#      - name: Login to Container Registry
#        uses: docker/login-action@v1
#        with:
#          username: scopeci
#          password: ${{ secrets.SCOPECI_TOKEN }}
#
#      - name: Update Image
#        run: make -C test/testContainers ${{ matrix.test }}-push

#  image:
#    name: Build Image
#    needs: [info,builder,build,test]
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        dist: [ubuntu]
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v2
#
#      - name: Setup QEMU
#        uses: docker/setup-qemu-action@v1
#
#      - name: Setup Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v1
#
#      - name: Login to Container Registry
#        uses: docker/login-action@v1
#        with:
#          registry: ${{ env.REGISTRY }}
#          #username: ${{ github.actor }}
#          #password: ${{ secrets.GITHUB_TOKEN }}
#          username: scopeci
#          password: ${{ secrets.SCOPECI_TOKEN }}
#
#      - name: Download x86_64 Binaries
#        uses: actions/download-artifact@v2
#        with:
#          name: binaries ${{ matrix.os }} x86_64
#          path: bin
#
#      - name: Download aarch64 Binaries
#        uses: actions/download-artifact@v2
#        with:
#          name: binaries ${{ matrix.os }} aarch64
#          path: bin
#
#      - name: Build Image
#        run: make image DIST=${{ matrix.dist }} BUILDER=${{ steps.buildx.outputs.name }} VERSION=${{ needs.info.outputs.tag }} LATEST=${{ needs.info.outputs.latest }} PUSH=${{ needs.info.outputs.push }}

